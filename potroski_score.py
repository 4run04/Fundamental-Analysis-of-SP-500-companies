# -*- coding: utf-8 -*-
"""Potroski_score.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1esBV2Om4Z1C2YfPDERQp4AfXWyZR2xvu
"""

pip install bs4

import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup

def get_financial_statements(ticker_symbol):
    try:
        company = yf.Ticker(ticker_symbol)

        income_statement = company.income_stmt
        balance_sheet = company.balance_sheet
        cash_flow_statement = company.cashflow
        return {'Income Statement': income_statement,'Balance Sheet': balance_sheet,'Cash Flow Statement': cash_flow_statement}
    except Exception as e:
        print(f"An error occurred: {e}")
        return None

sp_500=requests.get('https://en.wikipedia.org/wiki/List_of_S%26P_500_companies')

bs=BeautifulSoup(sp_500.text,'html.parser')
table=bs.find_all('table',{'class':'wikitable sortable sticky-header'})

sp_500_tickers={}
for i in table[0].find_all('tr'):
  try:
    j=[x.text.strip() for x in i.find_all('td')]
    sp_500_tickers[j[0]]=j[1]
  except:
    print('na')
for i,j in sp_500_tickers.items():
  print(i," ",j)

stmt=get_financial_statements('AAPL')
print(stmt['Balance Sheet'].columns,'\n',stmt['Income Statement'].columns,'\n',stmt['Cash Flow Statement'].columns)

def profitability_statement(financial_statement):
    p = [0 for _ in range(5)]
    years = financial_statement['Cash Flow Statement'].columns
    # (+)ve net income
    p[0] = 1 if financial_statement['Income Statement'].loc['Net Income'][years[0]] > 0 else 0
    # net income improved
    p[1] = 1 if financial_statement['Income Statement'].loc['Net Income'][years[0]] > financial_statement['Income Statement'].loc['Net Income'][years[1]] else 0
    # (+)ve ROA
    p[2] = 1 if financial_statement['Income Statement'].loc['Net Income'][years[0]] / financial_statement['Balance Sheet'].loc['Total Assets'][years[0]] > 0 else 0
    # (+)ve Operating Cashflow
    p[3] = 1 if financial_statement['Cash Flow Statement'].loc['Operating Cash Flow'][years[0]] > 0 else 0
    # if operating cashflow is greater than net income
    p[4] = 1 if financial_statement['Cash Flow Statement'].loc['Operating Cash Flow'][years[0]] > financial_statement['Income Statement'].loc['Net Income'][years[0]] else 0

    return sum(p)

def leverage(financial_statement):
    p = [0 for _ in range(2)]
    years = financial_statement['Cash Flow Statement'].columns
    #debt-to-equity ratio
    pres_debt_to_eq=financial_statement['Balance Sheet'].loc['Total Debt'][years[0]]/financial_statement['Balance Sheet'].loc['Common Stock Equity'][years[0]]
    prev_debt_to_eq=financial_statement['Balance Sheet'].loc['Total Debt'][years[1]]/financial_statement['Balance Sheet'].loc['Common Stock Equity'][years[1]]

    p[0]=1 if pres_debt_to_eq<prev_debt_to_eq else 0

    #CURRENT RATIO
    pres_curr_ratio=financial_statement['Balance Sheet'].loc['Total Assets'][years[0]]/financial_statement['Balance Sheet'].loc['Current Liabilities'][years[0]]
    prev_curr_ratio=financial_statement['Balance Sheet'].loc['Total Assets'][years[1]]/financial_statement['Balance Sheet'].loc['Current Liabilities'][years[1]]

    p[1]=1 if pres_curr_ratio<prev_curr_ratio else 0

    return sum(p)

def efficiency_statement(financial_statement):
    p = [0 for _ in range(2)]
    years = financial_statement['Cash Flow Statement'].columns

    # gross profit
    pres_gross_profit = financial_statement['Income Statement'].loc['Total Revenue'][years[0]]/financial_statement['Balance Sheet'].loc['Net Tangible Assets'][years[0]]
    prev_gross_profit = financial_statement['Income Statement'].loc['Total Revenue'][years[1]]/financial_statement['Balance Sheet'].loc['Net Tangible Assets'][years[1]]
    p[0] = 1 if pres_gross_profit*100 > prev_gross_profit*100 else 0

    # asset turnover improved
    avg_assets=(financial_statement['Balance Sheet'].loc['Total Assets'][years[0]]+financial_statement['Balance Sheet'].loc['Total Assets'][years[1]])/2
    prev_avg_assets=(financial_statement['Balance Sheet'].loc['Total Assets'][years[1]]+financial_statement['Balance Sheet'].loc['Total Assets'][years[2]])/2

    asset_turnover=financial_statement['Income Statement'].loc['Total Revenue'][years[0]]/avg_assets
    prev_asset_turnover=financial_statement['Income Statement'].loc['Total Revenue'][years[1]]/prev_avg_assets
    p[1] = 1 if asset_turnover*100 > prev_asset_turnover*100 else 0
    return sum(p)

cf=get_financial_statements('AAPL')['Income Statement'].T.columns
for i in cf:
  if "evenue" in i:
    print(i)

print("POTROSKI SCORE FOR SP-500 COMPANIES")
dict1={}
for i,ticker in enumerate(sp_500_tickers):
  print(f"{i+1}.Ticker: {ticker} Company name: {sp_500_tickers[ticker]}")
  if(i+1==11):
    break
  try:
    financial_statement=get_financial_statements(ticker)
    profitabilityscore=profitability_statement(financial_statement)
    leveragescore=leverage(financial_statement)
    efficienciescore=efficiency_statement(financial_statement)
    print("Profitability Score: ",profitabilityscore)
    print("Leverage Score: ",leveragescore)
    print("Efficiency Score: ",efficienciescore)
    print("Potroski Score: ",profitabilityscore+leveragescore+efficienciescore)
    print()
    dict1[ticker]=profitabilityscore+leveragescore+efficienciescore
  except:
    print("Not Available")
    print()

print("RANKINGS BASED ON POTROSKI SCORE")
dict2=dict(sorted(dict1.items(),key=lambda x:x[1],reverse=True))
for i,j in dict2.items():
  print(f"{i} {sp_500_tickers[i]}: {j}")
for i in sp_500_tickers.keys():
  if i not in dict2:
    print(f"{i} {sp_500_tickers[i]}: 0")